@{
	Layout = null;
}
<!DOCTYPE html>
<html lang="pt">
<head>
	<meta charset="utf-8" />
	<title>Sertã Cup - Brevemente</title>
	<link rel="stylesheet" href="~/css/soon.css" />
</head>
<body>
	<div class="soon-image"></div>
	<img src="/images/cup test.png" alt="Taça Sertã Cup" class="hero-cup-img" />
	<div class="soon-container">
		<div class="soon-text">
			<span class="soon-caption">ACOMPANHA TODO O TORNEIO</span>
			<div class="soon-main">BREVEMENTE</div>
			<div class="soon-footer-title">IV SERTÃ CUP</div>
			<div class="soon-footer-date">28/29 JUNHO</div>
			<div class="soon-logos">
				<img class="logo-slot" src="~/images/patron/1.png" alt="Logo 1" />
				<img class="logo-slot" src="~/images/patron/2.png" alt="Logo 2" />
				<img class="logo-slot" src="~/images/patron/7.svg" alt="Logo 3" />
			</div>
			<div class="soon-icons">
				<a href="#"><img class="icon-img" src="~/images/icons/FB.png" alt="FaceBook" /></a>
				<a href="#"><img class="icon-img" src="~/images/icons/INSTA.png" alt="Instagram" /></a>
			</div>
		</div>
	</div>
	<canvas id="cup-canvas"></canvas>

	<!-- Three.js -->
	<script src="https://cdn.jsdelivr.net/npm/three@0.138.0/build/three.min.js"></script>

	<!-- GLTFLoader (not minified, exposes global GLTFLoader) -->
	<script src="https://cdn.jsdelivr.net/npm/three@0.138.0/examples/js/loaders/GLTFLoader.js"></script>

	<!-- Your code -->
	<script>
		console.log('Three version:', THREE?.REVISION);
		console.log('GLTFLoader loaded?', typeof GLTFLoader);

		const scene = new THREE.Scene();
		const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100);
		camera.position.z = 5;

		const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('cup-canvas'), alpha: true });
		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.setPixelRatio(window.devicePixelRatio);

		const light = new THREE.HemisphereLight(0xffffff, 0x444444, 1.2);
		scene.add(light);

		const loader = new GLTFLoader();
		loader.load('/models/scup.glb', function (gltf) {
			const model = gltf.scene;
			model.scale.set(1.5, 1.5, 1.5);
			model.rotation.y = Math.PI;
			scene.add(model);

			function animate() {
				requestAnimationFrame(animate);
				model.rotation.y += 0.005;
				renderer.render(scene, camera);
			}
			animate();
		}, undefined, function (error) {
			console.error('Erro ao carregar modelo:', error);
		});

		window.addEventListener('resize', () => {
			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();
			renderer.setSize(window.innerWidth, window.innerHeight);
		});
	</script>
</body>
</html>