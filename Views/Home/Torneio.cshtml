@model SertaCup_site.Models.TorneioViewModel

@{
	ViewData["Title"] = "Torneio - Serta Cup";
}

<link rel="stylesheet" href="~/css/torneio.css" />

<div class="grid-container">
	<div class="col-span-12 md:col-span-8 sm:col-span-4 selector-section">
		<div class="tabs">
			<button class="tab-button active" data-target="calendario">CALENDÁRIO</button>
			<button class="tab-button" data-target="grupos">GRUPOS</button>
			<button class="tab-button" data-target="fases-finais">FASES FINAIS</button>
		</div>
	</div>
	<div class="cal-sticky-buffer"></div>
	<div class="col-span-12 md:col-span-8 sm:col-span-4 content-section">
		<div id="calendario" class="tab-content active">
			@{
				var now = DateTime.Now;
				var jogosOrdenados = Model.Calendario
				.Select(j => new
				{
					Jogo = j,
					Data = j.hora_inicio ?? DateTime.MinValue,
					HoraPrevista = j.hora_prevista,
					Hora = j.hora_prevista.Hour,
					Fase = j.grupo == 0 ? "FASE FINAL" : "FASE DE GRUPOS"
				})
				.OrderBy(j => j.HoraPrevista.Date)
				.ThenBy(j => j.Hora)
				.ThenBy(j => j.Fase == "FASE FINAL" ? 1 : 0)
				.ToList();

				var dias = jogosOrdenados
				.GroupBy(j => j.HoraPrevista.Date)
				.OrderBy(g => g.Key);
			}
			@foreach (var dia in dias)
			{
				var gruposValidos = dia
				.SelectMany(j => j.Fase == "FASE FINAL" || j.Fase == "FASE DE GRUPOS" ? new[] { j } : Array.Empty<dynamic>())
				.Where(j => j.Jogo.equipa1 != 0 && j.Jogo.equipa2 != 0)
				.ToList();

				if (!gruposValidos.Any()) continue;
				var isPast = dia.Key < DateTime.Today;
				var pt = new System.Globalization.CultureInfo("pt-PT");
				var dataFormatada = dia.Key.ToString("dd", pt) + "/" + dia.Key.ToString("MMM", pt).Replace(".", "").ToUpper();
				<div class="cal-day @(isPast ? "past hidden" : "")" data-date="@dia.Key.ToString("yyyy-MM-dd")">
					<div class="cal-fixed-header" id="calendar-day">@dataFormatada</div>

					@foreach (var horaGrupo in dia.GroupBy(j => j.HoraPrevista.Hour))
					{
						var hora = horaGrupo.Key;
				
						@foreach (var faseGrupo in horaGrupo.GroupBy(j => j.Fase))
						{
							var jogosValidos = faseGrupo.Where(j => j.Jogo.equipa1 != 0 && j.Jogo.equipa2 != 0).ToList();
							if (!jogosValidos.Any()) continue;
							var horaTexto = horaGrupo.First().HoraPrevista.ToString("HH:mm");
							<div class="cal-time-block" data-hour="@hora" data-day="@dia.Key.ToString("yyyy-MM-dd")">
								<div class="cal-time-header">
									<span class="cal-time">@horaTexto</span>
									<span class="cal-livetag"><span class="live-dot"></span> AO VIVO</span>
									<span class="cal-phase">@faseGrupo.Key</span>
								</div>
								<div class="cal-sticky-buttons">
									<button id="show-past-games" class="cal-toggle-button">Ver jogos anteriores</button>
									<button id="back-to-live" class="cal-toggle-button hidden">Voltar ao vivo</button>
								</div>

								@foreach (var jogoObj in faseGrupo.OrderBy(j => j.HoraPrevista))
								{
									if (jogoObj.Jogo.equipa1 == 0 || jogoObj.Jogo.equipa2 == 0)
									{
										continue;
									}
									var j = jogoObj.Jogo;
									var jvm = Model.Jogos.FirstOrDefault(x => x.Id == j.Id.ToString());
									var estadoRaw = jvm?.Estado?.Trim().ToLower() ?? "";
									var horaPrevista = j.hora_prevista;
									var horaInicio = j.hora_inicio ?? DateTime.MinValue;
									var hora2Parte = j.hora_inicio_2parte ?? DateTime.MinValue;
									var terminado = estadoRaw == "resultado final";
									var intervalo = estadoRaw == "intervalo";
									var primeiraParte = estadoRaw == "1ªp";
									var segundaParte = estadoRaw == "2ªp";
									var começou = j.começado;

									var isAtrasado = !terminado && !intervalo && !primeiraParte && !segundaParte && horaPrevista < now && !começou;

									var estadoDisplay = estadoRaw.ToUpper();
									var clockText = "";

									if (primeiraParte)
									{
										clockText = GetClockDisplay(j.hora_inicio?.ToString(), now);
									}
									else if (segundaParte)
									{
										clockText = GetClockDisplay(j.hora_inicio_2parte?.ToString(), now);
									}
									else if (intervalo)
									{
										clockText = "INTERVALO";
									}
									else if (terminado)
									{
										clockText = "RESULTADO FINAL";
									}

									if (isAtrasado)
									{
										estadoDisplay = $"EM ATRASO ({horaPrevista:HH:mm})";
									}

									// CSS class logic
									var estadoClass = "";
									if (terminado) estadoClass = "finished";
									else if (intervalo || primeiraParte || segundaParte) estadoClass = "live";
									else if (isAtrasado) estadoClass = "atrasado";

									// score display
									var showScore = terminado || começou;
									var scoreDisplay = showScore ? $"{j.golos_equipa1} - {j.golos_equipa2}" : "VS";

									// winner/loser
									var class1 = terminado ? (j.golos_equipa1 > j.golos_equipa2 ? "winner" : j.golos_equipa1 < j.golos_equipa2 ? "loser" : "") : "";
									var class2 = terminado ? (j.golos_equipa2 > j.golos_equipa1 ? "winner" : j.golos_equipa2 < j.golos_equipa1 ? "loser" : "") : "";


									var marcadores1 = jvm?.MarcadoresEquipa1 ?? new List<string>();
									var marcadores2 = jvm?.MarcadoresEquipa2 ?? new List<string>();

									<div class="cal-game @estadoClass"
										 data-start="@j.hora_inicio"
										 data-date="@jogoObj.HoraPrevista.ToString("yyyy-MM-dd")"
										 data-hour="@hora"
										 data-estado="@jvm?.Estado"
										 onclick="@(começou ? "toggleScorers(this)" : "")">
										<div class="cal-teams">
											<div class="cal-team-block @class1">
												<img src="/images/teams/@(Uri.EscapeDataString(jvm?.equipa1 ?? "") + " logo.png")" alt="@jvm?.equipa1" class="cal-team-logo" />
												<span class="cal-team-name">@jvm?.equipa1</span>
											</div>

											<div class="cal-display">
												<div class="cal-game-info">
													<span class="cal-game-status">@estadoDisplay</span>
													<span class="cal-game-clock">@clockText</span>
												</div>
												<div class="cal-score">@scoreDisplay</div>
											</div>

											<div class="cal-team-block @class2">
												<img src="/images/teams/@(Uri.EscapeDataString(jvm?.equipa2 ?? "") + " logo.png")" alt="@jvm?.equipa2" class="cal-team-logo" />
												<span class="cal-team-name">@jvm?.equipa2</span>
											</div>
										</div>
										@if (marcadores1.Any() || marcadores2.Any())
										{
											<div class="cal-scorers">
												<div class="scorer-left">
													@foreach (var m in marcadores1)
													{
														<div>@m</div>
													}
												</div>
												<div class="scorer-right">
													@foreach (var m in marcadores2)
													{
														<div>@m</div>
													}
												</div>
											</div>
										}
										<div class="cal-details">
											<span class="cal-group">@j.situacao_precaria</span>
											<span class="cal-field">Campo @j.campo</span>
										</div>

									</div>
								}
							</div>
						}
					}
				</div>
			}
		</div>


		<div id="grupos" class="tab-content">
			<div class="grid-container group-section">
				@foreach (var group in Model.Grupos.OrderBy(g => g.Name))
				{
					<div class="col-span-6 md:col-span-4 sm:col-span-4 group-block">
						<table class="group-table">
							<colgroup>
								<col class="col-position" />
								<col class="col-team" />
								<col class="col-stat" />
								<col class="col-stat" />
								<col class="col-stat" />
								<col class="col-stat" />
								<col class="col-stat" />
								<col class="col-stat" />
							</colgroup>
							<thead>
								<tr>
									<th colspan="2" class="group-title">Grupo @group.Name</th>
									<th class="group-stat-head">J</th>
									<th class="group-stat-head">V</th>
									<th class="group-stat-head">E</th>
									<th class="group-stat-head">D</th>
									<th class="group-stat-head">DG</th>
									<th class="group-stat-head">P</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var team in group.Teams
															.OrderByDescending(t => t.P)
															.ThenByDescending(t => t.GD)
															.ThenByDescending(t => t.GM)
															.Select((t, i) => new { Team = t, Position = i + 1 }))
								{
									<tr>
										<td class="group-team-position place-@team.Position">@team.Position<sup>º</sup></td>
										<td class="group-team-cell">
											<img src="/images/teams/@(Uri.EscapeDataString(team.Team.Name) + " logo.png")" alt="@team.Team.Name" class="group-team-logo" />
											<span class="group-team-name">@team.Team.Name</span>
										</td>
										<td class="group-team-stat">@team.Team.J</td>
										<td class="group-team-stat">@team.Team.V</td>
										<td class="group-team-stat">@team.Team.E</td>
										<td class="group-team-stat">@team.Team.D</td>
										<td class="group-team-stat">@team.Team.GD</td>
										<td class="group-team-points">@team.Team.P</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</div>
		</div>


		<div id="fases-finais" class="tab-content">
			<div class="ff-section-title">Todas as Ligas</div>

			@{
				var isMobile = Context.Request.Query["mobile"].ToString().ToLower() == "true";

				// Total teams per league
				var teamCounts = new Dictionary<string, int>
						{
						{ "champs", 32 },
						{ "europa", 16 },
						{ "conference", 16 },
						{ "feminina", 4 }
						};

				// Helper function to compute placement range
				string GetPlacementRange(int totalPlacements, int boxCount, int boxIndex)
				{
					int rangeSize = totalPlacements / boxCount;
					int start = boxIndex * rangeSize + 1;
					int end = (boxIndex + 1) * rangeSize;
					return $"{start}º–{end}º LUGAR";
				}

				var leagueRounds = new Dictionary<string, dynamic[]>
				{
					["champs"] = isMobile ? new[] {
						new { Title = "1ª Ronda", Side = "center", BoxCount = 1, GamesPerBox = 8, Jogos = new[] { "59", "60", "61", "62", "63", "64", "57", "58" }, GapLevel = 0 },
						new { Title = "2ª Ronda", Side = "center", BoxCount = 2, GamesPerBox = 4, Jogos = new[] { "73", "74", "75", "76", "77", "78", "79", "80" }, GapLevel = 1 },
						new { Title = "3ª Ronda", Side = "center", BoxCount = 4, GamesPerBox = 2, Jogos = new[] { "89", "90", "91", "92", "93", "94", "95", "96" }, GapLevel = 2 },
						new { Title = "Finais", Side = "center", BoxCount = 8, GamesPerBox = 1, Jogos = new[] { "97", "98", "99", "100", "101", "102", "103", "104" }, GapLevel = 3 }
						} : new[] {
						new { Title = "1ª Ronda", Side = "left", BoxCount = 1, GamesPerBox = 4, Jogos = new[] { "59", "60", "61", "62" }, GapLevel = 0 },
						new { Title = "2ª Ronda", Side = "left", BoxCount = 2, GamesPerBox = 2, Jogos = new[] { "73", "74", "75", "76" }, GapLevel = 1 },
						new { Title = "3ª Ronda", Side = "left", BoxCount = 4, GamesPerBox = 1, Jogos = new[] { "89", "90", "91", "92" }, GapLevel = 2 },
						new { Title = "Finais", Side = "center", BoxCount = 8, GamesPerBox = 1, Jogos = new[] { "97", "98", "99", "100", "101", "102", "103", "104" }, GapLevel = 3 },
						new { Title = "3ª Ronda", Side = "right", BoxCount = 4, GamesPerBox = 1, Jogos = new[] { "93", "94", "95", "96" }, GapLevel = 2 },
						new { Title = "2ª Ronda", Side = "right", BoxCount = 2, GamesPerBox = 2, Jogos = new[] { "77", "78", "79", "80" }, GapLevel = 1 },
						new { Title = "1ª Ronda", Side = "right", BoxCount = 1, GamesPerBox = 4, Jogos = new[] { "63", "64", "57", "58" }, GapLevel = 0 }
						},
					["europa"] = isMobile ? new[] {
						new { Title = "1ª Ronda", Side = "center", BoxCount = 1, GamesPerBox = 4, Jogos = new[] { "49", "50", "51", "52" }, GapLevel = 0 },
						new { Title = "2ª Ronda", Side = "center", BoxCount = 2, GamesPerBox = 2, Jogos = new[] { "69", "70", "71", "72" }, GapLevel = 1 },
						new { Title = "Finais", Side = "center", BoxCount = 4, GamesPerBox = 1, Jogos = new[] { "81", "82", "83", "88" }, GapLevel = 3 }
						} : new[] {
						new { Title = "1ª Ronda", Side = "left", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "49", "50" }, GapLevel = 0 },
						new { Title = "2ª Ronda", Side = "left", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "69", "70" }, GapLevel = 1 },
						new { Title = "Finais", Side = "center", BoxCount = 4, GamesPerBox = 1, Jogos = new[] { "81", "82", "83", "88" }, GapLevel = 3 },
						new { Title = "2ª Ronda", Side = "right", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "71", "72" }, GapLevel = 1 },
						new { Title = "1ª Ronda", Side = "right", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "51", "52" }, GapLevel = 0 }
						},
					["conference"] = isMobile ? new[] {
						new { Title = "1ª Ronda", Side = "center", BoxCount = 1, GamesPerBox = 4, Jogos = new[] { "53", "54", "55", "56" }, GapLevel = 0 },
						new { Title = "2ª Ronda", Side = "center", BoxCount = 2, GamesPerBox = 2, Jogos = new[] { "65", "66", "67", "68" }, GapLevel = 1 },
						new { Title = "Finais", Side = "center", BoxCount = 4, GamesPerBox = 1, Jogos = new[] { "84", "85", "86", "87" }, GapLevel = 3 }
						} : new[] {
						new { Title = "1ª Ronda", Side = "left", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "53", "54" }, GapLevel = 0 },
						new { Title = "2ª Ronda", Side = "left", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "65", "66" }, GapLevel = 1 },
						new { Title = "Finais", Side = "center", BoxCount = 4, GamesPerBox = 1, Jogos = new[] { "84", "85", "86", "87" }, GapLevel = 3 },
						new { Title = "2ª Ronda", Side = "right", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "67", "68" }, GapLevel = 1 },
						new { Title = "1ª Ronda", Side = "right", BoxCount = 1, GamesPerBox = 2, Jogos = new[] { "55", "56" }, GapLevel = 0 }
						},
					["feminina"] = isMobile ? new[] {
						new { Title = "Meias Finais", Side = "center", BoxCount = 2, GamesPerBox = 1, Jogos = new[] { "105", "106" }, GapLevel = 1 },
						new { Title = "Finais", Side = "center", BoxCount = 2, GamesPerBox = 1, Jogos = new[] { "108", "107" }, GapLevel = 3 }
						} : new[] {
						new { Title = "Meias Finais", Side = "left", BoxCount = 1, GamesPerBox = 1, Jogos = new[] { "105" }, GapLevel = 1 },
						new { Title = "Finais", Side = "center", BoxCount = 2, GamesPerBox = 1, Jogos = new[] { "108", "107" }, GapLevel = 3 },
						new { Title = "Meias Finais", Side = "right", BoxCount = 1, GamesPerBox = 1, Jogos = new[] { "106" }, GapLevel = 1 }
						}
				};


				var allLeagues = new[] {
						new { Key = "champs", Name = "Liga dos Campeões" },
						new { Key = "europa", Name = "Liga Europa" },
						new { Key = "conference", Name = "Liga Conferência" },
						new { Key = "feminina", Name = "Liga Feminina" }
						};

			}



			@foreach (var league in allLeagues)
			{
				<div class="ff-league-section">
					<div class="ff-league-title">@league.Name</div>
					<div class="ff-league-scroll-wrapper">
						<div class="ff-league-scroll">
							@for (int r = 0; r < leagueRounds[league.Key].Length; r++)
							{
								var round = leagueRounds[league.Key][r];
								var gapClass = $"gap-level-{round.GapLevel}";
								<div class="ff-round-wrapper @gapClass">
									@if (!isMobile && round.Side == "right")
									{
										<div class="ff-vertical-separator"></div>
									}
									<div class="ff-round-column">
										<div class="ff-round-title @(round.Title == "Finais" ? "ff-final-round" : "")">@round.Title</div>
										<div class="ff-game-stack">
											@for (int i = 0; i < round.BoxCount; i++)
											{
												<div class="ff-game-box">
													<div class="ff-placement-range">@GetPlacementRange(teamCounts[league.Key], round.BoxCount, i)</div>
													@for (int j = 0; j < round.GamesPerBox; j++)
													{
														var index = i * round.GamesPerBox + j;
														if (index < round.Jogos.Length)
														{
															var jogo = Model.Jogos.FirstOrDefault(o => o.Id == round.Jogos[index]);
															if (jogo != null)
															{
																var isFinished = jogo.Estado == "Resultado Final";
																var isOngoing = jogo.Estado == "A Decorrer";
																int.TryParse(jogo.golos_equipa1, out var g1);
																int.TryParse(jogo.golos_equipa2, out var g2);
																var class1 = isFinished ? (g1 > g2 ? "ff-winner" : g1 < g2 ? "ff-loser" : "") : "";
																var class2 = isFinished ? (g2 > g1 ? "ff-winner" : g2 < g1 ? "ff-loser" : "") : "";

																<div class="ff-game">
																	<div class="ff-game-status">
																		@if (isOngoing)
																		{
																			<div class="ff-game-live"><span class="ff-live-dot"></span> AO VIVO</div>
																		}
																		else
																		{
																			<div class="ff-game-caption">@jogo.Hora</div>
																		}
																	</div>
																	<div class="ff-game-box-inner">
																		<div class="ff-team-block @class1">
																			<img src="/images/teams/@(Uri.EscapeDataString(jogo.equipa1 ?? "") + " logo.png")" alt="@jogo.equipa1" class="ff-team-logo" />
																			<span class="ff-team-name"><span>@jogo.equipa1</span></span>
																			<div class="ff-separator"></div>
																			<span class="ff-team-score">@g1</span>
																		</div>
																		<div class="ff-team-block @class2">
																			<img src="/images/teams/@(Uri.EscapeDataString(jogo.equipa2 ?? "") + " logo.png")" alt="@jogo.equipa2" class="ff-team-logo" />
																			<span class="ff-team-name"><span>@jogo.equipa2</span></span>
																			<div class="ff-separator"></div>
																			<span class="ff-team-score">@g2</span>
																		</div>
																	</div>

																</div>
															}
														}
													}
												</div>
												@if (i < round.BoxCount - 1)
												{
													<div class="ff-horizontal-separator"></div>
												}
											}
										</div>
									</div>
									@if (!isMobile && round.Side == "left")
									{
										<div class="ff-vertical-separator"></div>
									}
								</div>
							}
						</div>
					</div>
				</div>
			}


		</div>

	</div>

</div>

@section Scripts {
	<script>
		// ==Selector Scripts===============

		// Tab toggle logic
		document.addEventListener('DOMContentLoaded', () => {
			const buttons = document.querySelectorAll('.tab-button');
			const contents = document.querySelectorAll('.tab-content');
			const stickyBuffer = document.querySelector('.cal-sticky-buffer');

			buttons.forEach(btn => {
				btn.addEventListener('click', () => {
					const target = btn.dataset.target;

					// Toggle tab visibility
					buttons.forEach(b => b.classList.remove('active'));
					contents.forEach(c => c.classList.remove('active'));
					btn.classList.add('active');
					document.getElementById(target).classList.add('active');

					// Show sticky buffer only on calendario tab
					if (stickyBuffer) {
						stickyBuffer.style.display = target === 'calendario' ? 'block' : 'none';
					}
				});
			});

			// Initial load from ?tab= param
			const urlParams = new URLSearchParams(window.location.search);
			const selectedTab = urlParams.get('tab') || 'calendario';
			const initialBtn = document.querySelector(`.tab-button[data-target="${selectedTab}"]`);
			if (initialBtn) initialBtn.click(); // triggers logic above
		});

		// ==FF Scripts=================
				document.querySelectorAll('.ff-round-column').forEach(roundCol => {
			let hasLiveOrFinishedGame = false;

			roundCol.querySelectorAll('.ff-game').forEach(game => {
				const estado = game.dataset.estado?.toLowerCase();
				const statusBox = game.querySelector('.ff-game-status');
				const blocks = game.querySelectorAll('.ff-team-block');

				// == LIVE GAMES ==
				if (estado === 'a decorrer') {
					hasLiveOrFinishedGame = true;
					if (statusBox) {
						statusBox.innerHTML = `<div class="ff-game-live"><span class="ff-live-dot"></span> AO VIVO</div>`;
					}
				}

				// == FINISHED GAMES ==
				if (estado === 'final' && blocks.length === 2) {
					hasLiveOrFinishedGame = true;
					const g1 = parseInt(game.dataset.golos1);
					const g2 = parseInt(game.dataset.golos2);

					if (!isNaN(g1) && !isNaN(g2)) {
						if (g1 > g2) {
							blocks[0].classList.add('ff-winner');
							blocks[1].classList.add('ff-loser');
						} else if (g2 > g1) {
							blocks[1].classList.add('ff-winner');
							blocks[0].classList.add('ff-loser');
						}
					}
				}
			});

			if (hasLiveOrFinishedGame) {
				roundCol.classList.add('active-round');
			}
		});

		document.addEventListener('DOMContentLoaded', () => {
			const isCalendario = document.getElementById('calendario');
			if (!isCalendario) return;

			const dayHeader = document.getElementById('calendar-day');
			const timeHeader = document.querySelector('.cal-time-header');
			const allDays = document.querySelectorAll('.cal-day');
			const allBlocks = document.querySelectorAll('.cal-time-block');
			const allGames = document.querySelectorAll('.cal-game');

			let currentDay = "";
			let currentTime = "";

			// === Auto Scroll to Live or Closest ===
			const now = new Date();
			let scrollTarget = null;
			let closestDiff = Infinity;

			allGames.forEach(game => {
				const startTime = new Date(game.dataset.start);
				const diffMin = (startTime - now) / 60000;

				if (diffMin <= 0 && diffMin >= -50 && !scrollTarget) {
					scrollTarget = game;
				}
				if (!scrollTarget && diffMin >= 0 && diffMin < closestDiff) {
					scrollTarget = game;
					closestDiff = diffMin;
				}
			});

			if (scrollTarget) {
				scrollTarget.scrollIntoView({ behavior: 'smooth', block: 'start' });

				setTimeout(() => {
					window.dispatchEvent(new Event('scroll')); // força atualização de headers
				}, 500);
			}

			// === Sticky Headers ===
			window.addEventListener('scroll', () => {
				// Day header
				let found = false;
				for (let i = 0; i < allDays.length; i++) {
					const rect = allDays[i].getBoundingClientRect();
					if (rect.top > 100) break;
					const newHeader = allDays[i].querySelector('.cal-fixed-header')?.textContent;
					if (newHeader && newHeader !== currentDay) {
						dayHeader.style.opacity = 0;
						setTimeout(() => {
							dayHeader.textContent = newHeader;
							dayHeader.style.opacity = 1;
						}, 150);
						currentDay = newHeader;
					}
					found = true;
				}
				if (!found && currentDay) {
					dayHeader.style.opacity = 0;
					setTimeout(() => {
						dayHeader.textContent = "";
						dayHeader.style.opacity = 1;
					}, 150);
					currentDay = "";
				}

				// Time block header
				let foundBlock = false;
				for (let i = 0; i < allBlocks.length; i++) {
					const block = allBlocks[i];
					const rect = block.getBoundingClientRect();

					if (rect.top <= 140) {
						const newHour = block.getAttribute('data-hour');
						if (newHour && newHour !== currentTime) {
							const local = block.querySelector('.cal-time')?.textContent || "";
							const phase = block.querySelector('.cal-phase')?.textContent || "";
							const tagContent = block.querySelector('.cal-livetag')?.cloneNode(true);
							const targetTag = timeHeader.querySelector('.cal-livetag');

							timeHeader.style.opacity = 0;
							setTimeout(() => {
								timeHeader.querySelector('.cal-time').textContent = local;
								timeHeader.querySelector('.cal-phase').textContent = phase;

								if (tagContent && targetTag) {
									targetTag.innerHTML = tagContent.innerHTML;
									targetTag.classList.toggle("visible", tagContent.classList.contains("visible"));
							 }

								timeHeader.style.opacity = 1;
							}, 150);

							currentTime = newHour;
						}
						foundBlock = true;
					}
				}

				if (!foundBlock && currentTime !== "") {
					currentTime = "";
					timeHeader.querySelector('.cal-time').textContent = "";
					timeHeader.querySelector('.cal-phase').textContent = "";
					timeHeader.querySelector('.cal-livetag')?.classList.remove("visible");
				}
			});
		});

			// === Apply Estado Classes ===
					const previousEstados = new Map();

		function applyGameStateClasses() {
			allGames.forEach(game => {
				const estado = game.dataset.estado?.trim().toLowerCase();
				const clock = game.querySelector(".cal-game-clock");
				const status = game.querySelector(".cal-game-status");

				if (!estado || !clock || !status) return;

				// Skip if estado hasn't changed
				if (previousEstados.get(game) === estado) return;

				previousEstados.set(game, estado); // Update stored value

				// Limpa classes antigas
				game.classList.remove("live", "finished", "atrasado", "pen");
				clock.classList.remove("live-blink", "interval-blink", "pen-blink");
				status.classList.remove("interval-blink", "pen-blink");

				// Aplica classes novas
				if (estado === "1ªp" || estado === "2ªp") {
					game.classList.add("live");
					clock.classList.remove("hidden");
					clock.classList.add("live-blink");
				} else if (estado === "intervalo") {
					game.classList.add("live");
					clock.classList.add("hidden");
					status.classList.add("interval-blink");
				} else if (estado === "resultado final") {
					game.classList.add("finished");
					clock.classList.add("hidden");
				} else if (estado.startsWith("em atraso")) {
					game.classList.add("atrasado");
					clock.classList.add("hidden");
				} else {
					clock.classList.add("hidden");
				}
			});

			highlightLiveBlocks();
		}

				function highlightLiveBlocks() {
			allBlocks.forEach(block => {
				const liveGames = block.querySelectorAll(".cal-game.live");
				const tag = block.querySelector(".cal-livetag");

				tag?.classList.toggle("visible", liveGames.length > 0);
				block.classList.toggle("live-block", liveGames.length > 0);
			});
		}

			// === Toggle Scorers ===
			window.toggleScorers = function (el) {
				el.classList.toggle("expanded");
			};

			// === Start Interval Updates ==
			function startLiveCheckLoop() {
				setInterval(() => {
					applyGameStateClasses();
				}, 15000);
			}

			applyGameStateClasses();
			startLiveCheckLoop();
		});

		//buttons
				document.getElementById("show-past-games")?.addEventListener("click", () => {
			document.querySelectorAll(".cal-day.past").forEach(el => el.classList.remove("hidden"));
			document.getElementById("back-to-live")?.classList.remove("hidden");
			document.getElementById("show-past-games")?.classList.add("hidden");
		});

		document.getElementById("back-to-live")?.addEventListener("click", () => {
			document.querySelectorAll(".cal-day.past").forEach(el => el.classList.add("hidden"));
			document.getElementById("back-to-live")?.classList.add("hidden");
			document.getElementById("show-past-games")?.classList.remove("hidden");

			// opcional: scroll até próximo bloco ao vivo
			const live = document.querySelector(".cal-game.live");
			if (live) live.scrollIntoView({ behavior: "smooth", block: "start" });
		});
	</script>
}

@functions {
	string GetClockDisplay(string startTime, DateTime now)
	{
		if (!DateTime.TryParse(startTime, out var start)) return "";
		var mins = (int)(now - start).TotalMinutes;
		return $"{mins}'";
	}
}